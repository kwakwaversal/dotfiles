[%- USE env = EnvHash -%]
[%- MACRO schema(name) BLOCK -%]
  [%- name || env.SQITCH_DEFAULT_SCHEMA -%]
[%- END -%]
BEGIN;

SELECT no_plan();

[%-#---------------------------------------------------------------------------%]
[%- IF (matches = change.match('^(?:(.*?)\/)?func(?:tions)?/(.*?)$')) -%]

/*****************************************************************************/
-- Include common SQL files

\i sql/constants.sql
\i sql/seeders/all.sql

/****************************************************************************/
-- Uncomment to make it easier testing functions without sqitch rebasing

/* DROP TRIGGER IF EXISTS [% schema(matches.0) %]_some_table_trigger on [% schema(matches.0) %].some_table; */

/* DROP FUNCTION IF EXISTS [% schema(matches.0) %].[% matches.1 %](); */

/* \i deploy/[% change %].sql */

[%- END -%]

[%-#---------------------------------------------------------------------------%]
[%- IF (matches = change.match('^(?:(.*?)\/)?roles/(.*?)$')) -%]

SET LOCAL ROLE [% matches.1 %];

[%- END -%]

[%-#---------------------------------------------------------------------------%]
[%- IF (matches = change.match('^(?:(.*?)\/)?schemas/(.*?)$')) -%]

/*****************************************************************************/
-- Reserved test

SELECT is(true, true);

[%- END -%]

[%-#---------------------------------------------------------------------------%]
[%- IF (matches = change.match('^(?:(.*?)\/)?tables\/(.*?)(_add.*|_alter.*|_repair.*|_refactor.*)?$')) -%]

/*****************************************************************************/
-- Test expected columns

SELECT col_is_pk('[% schema(matches.0) %]', '[% matches.1 %]', 'id', '[% matches.1 %].id *is* a pk');
SELECT col_is_unique('[% schema(matches.0) %]', '[% matches.1 %]', ARRAY['name'], '[% matches.1 %].name is unique');
SELECT col_not_null('[% schema(matches.0) %]', '[% matches.1 %]', col, 'not null check for [% matches.1 %].' || col)
  FROM (
    VALUES('id'),
          ('name')
  ) AS ctmp (col);

[%- END -%]

[%-#---------------------------------------------------------------------------%]
[%- IF (matches = change.match('^(?:(.*?)\/)?triggers/(.*?)$')) -%]

/*****************************************************************************/
-- Include common SQL files

\i sql/constants.sql
\i sql/seeders/all.sql

/****************************************************************************/
-- Uncomment to make it easier testing functions without sqitch rebasing

/* DROP TRIGGER IF EXISTS [% schema(matches.0) %]_some_table_trigger on [% schema(matches.0) %].some_table; */

/* DROP FUNCTION IF EXISTS [% schema(matches.0) %].[% matches.1 %](); */

/* \i deploy/[% change %].sql */

/*****************************************************************************/
-- Test function

SELECT is([% matches.1 %], NULL, 'missing schema is null')
  FROM [% schema(matches.0) %].[% matches.1 %](
    '{ "users": { "id": ":uuid" } }'::jsonb
  );

[%- END -%]

[%-#---------------------------------------------------------------------------%]
[%- IF (matches = change.match('^(?:(.*?)\/)?types/(.*?)$')) -%]

/*****************************************************************************/
-- Test type exists

SELECT has_type('[% schema(matches.0) %]', '[% matches.1 %]', 'has type');

[%- END -%]

/*****************************************************************************/
-- Testing

SAVEPOINT foo;

ROLLBACK TO SAVEPOINT foo;

/*****************************************************************************/
-- Finish

SELECT is(1, 1, 'using savepoints mean a final test before finishing');

SELECT * FROM finish();

ROLLBACK;
