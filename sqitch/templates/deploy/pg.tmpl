[%- USE env = EnvHash -%]
-- Deploy [% project %]:[% change %] to [% engine %]
[% FOREACH item IN requires -%]
-- requires: [% item %]
[% END -%]
[% FOREACH item IN conflicts -%]
-- conflicts: [% item %]
[% END -%]

BEGIN;

[%-#---------------------------------------------------------------------------%]
[%- IF (matches = change.match('^(?:(.*?)\/)?func(?:tions)?/(.*?)$')) -%]

CREATE FUNCTION [% matches.0 || env.SQITCH_DEFAULT_SCHEMA %].[% matches.1 %]
(
  p_id uuid,
  p_datetime timestamp with time zone default [% matches.0 || env.SQITCH_DEFAULT_SCHEMA %].some_function()
)
RETURNS boolean
LANGUAGE 'plpgsql'
  AS
$BODY$
BEGIN

END;
$BODY$;

CREATE FUNCTION [% matches.0 || env.SQITCH_DEFAULT_SCHEMA %].[% matches.1 %](in uuid, in timestampts, out some_name uuid)
  AS
$SQL$

  SELECT
    id
  FROM
    [% matches.0 || env.SQITCH_DEFAULT_SCHEMA %].some_table
  WHERE
    id = $1;

$SQL$
LANGUAGE SQL IMMUTABLE;

COMMENT ON FUNCTION [% matches.0 || env.SQITCH_DEFAULT_SCHEMA %].[% matches.1 %](uuid, timestamptz) IS
'A nice function comment.';

[%- END -%]

[%-#---------------------------------------------------------------------------%]
[%- IF (matches = change.match('^(?:(.*?)\/)?roles/(.*?)$')) -%]

-- https://www.postgresql.org/docs/current/sql-createrole.html
CREATE ROLE [% matches.1 %] IN ROLE foo;

COMMENT ON ROLE [% matches.1 %] IS
'A nice role comment. User must be superuser or have `CREATEROLE` privilege.';

[%- END -%]

[%-#---------------------------------------------------------------------------%]
[%- IF (matches = change.match('^(?:(.*?)\/)?schemas/(.*?)$')) -%]

DO $$ BEGIN PERFORM create_new_schema('[% matches.1 %]'); END $$;

COMMENT ON SCHEMA [% matches.1 %] IS
'[% note %]';

[%- END -%]

[%-#---------------------------------------------------------------------------%]
[%- IF (matches = change.match('^(?:(.*?)\/)?tables\/(.*?)(_add.*|_alter.*|_repair.*|_refactor.*)?$')) -%]

CREATE TABLE [% matches.0 || env.SQITCH_DEFAULT_SCHEMA %].[% matches.1 %] (
  id uuid default public.gen_random_uuid() not null,
  name citext not null,
  description text,
  rstatus [% env.SQITCH_DEFAULT_SCHEMA %].rstatus default 'active'::[% env.SQITCH_DEFAULT_SCHEMA %].rstatus not null,
  created_at timestamp with time zone default CURRENT_TIMESTAMP not null,
  created_by uuid,
  updated_at timestamp with time zone default CURRENT_TIMESTAMP not null,
  updated_by uuid,
  PRIMARY KEY (id),
  UNIQUE (name),
  FOREIGN KEY (created_by) REFERENCES [% matches.0 || env.SQITCH_DEFAULT_SCHEMA %].users (id)
    ON UPDATE CASCADE ON DELETE RESTRICT,
  FOREIGN KEY (updated_by) REFERENCES [% matches.0 || env.SQITCH_DEFAULT_SCHEMA %].users (id)
    ON UPDATE CASCADE ON DELETE RESTRICT
);

[%- comment_entity = (matches.0 || env.SQITCH_DEFAULT_SCHEMA) _ '.' _ matches.1 -%]

COMMENT ON TABLE [% comment_entity %] IS
'Describe the table as concisely as practical.';

COMMENT ON COLUMN [% comment_entity %].name IS
'The name displayed on the frontend. This is predominantly presentational.';

COMMENT ON COLUMN [% comment_entity %].description IS
'The case description displayed on the frontend. This is predominantly presentational.';

COMMENT ON COLUMN [% comment_entity %].rstatus IS
'The status of the record. One of `active`, `inactive`, or `deleted`.';

[%- IF (submatches = change.match('.*?_alter_(.*)_(?:add|and|as|to).*')) -%]
ALTER TABLE [% matches.0 || env.SQITCH_DEFAULT_SCHEMA %].[% matches.1 %]
  ALTER column [% submatches.0 || 'foo' %] DROP NOT NULL;
[%- END -%]

[%- END -%]

[%-#---------------------------------------------------------------------------%]
[%- IF (matches = change.match('^(?:(.*?)\/)?triggers/(.*?)$')) -%]

CREATE FUNCTION [% matches.0 || env.SQITCH_DEFAULT_SCHEMA %].[% matches.1 %]() RETURNS TRIGGER AS
$BODY$
BEGIN

  -- Stop something from happening or something.
  IF [% matches.0 || env.SQITCH_DEFAULT_SCHEMA %].some_function(NEW.id) = FALSE THEN
    RAISE EXCEPTION 'oh no!';
  END IF;

  RETURN NEW;

END;
$BODY$
LANGUAGE 'plpgsql';

CREATE TRIGGER trg_some_table_iu
  BEFORE INSERT OR UPDATE ON [% matches.0 || env.SQITCH_DEFAULT_SCHEMA %].some_table
    FOR EACH ROW
    WHEN (
      NEW.foo = 'bar'
    )
    EXECUTE PROCEDURE [% matches.0 || env.SQITCH_DEFAULT_SCHEMA %].trg_some_table();

COMMENT ON TRIGGER trg_some_table_iu ON [% matches.0 || env.SQITCH_DEFAULT_SCHEMA %].some_table IS
'Some description about a trigger.';

[%- END -%]

[%-#---------------------------------------------------------------------------%]
[%- IF (matches = change.match('^(?:(.*?)\/)?types/(.*?)$')) -%]

CREATE TYPE [% matches.0 || env.SQITCH_DEFAULT_SCHEMA %].[% matches.1 %] AS ENUM (
  'foo',
  'bar',
  'baz'
);

COMMENT ON TYPE [% matches.0 || env.SQITCH_DEFAULT_SCHEMA %].[% matches.1 %] IS
'Nice comment about a type.';

[%- END -%]

[%-#---------------------------------------------------------------------------%]
[%- IF (matches = change.match('^(?:(.*?)\/)?users/(.*?)(_alter.*)$')) -%]

-- https://www.postgresql.org/docs/current/sql-createrole.html
CREATE USER [% matches.1 %] WITH
  SUPERUSER
  CREATEDB
  INHERIT
  LOGIN
  REPLICATION
  BYPASSRLS
  CONNECTION LIMIT 1
  PASSWORD ''
  VALID UNTIL 'timstamptz'
  ;

ALTER USER [% matches.1 %] WITH BYPASSRLS;

[%- END -%]

COMMIT;
